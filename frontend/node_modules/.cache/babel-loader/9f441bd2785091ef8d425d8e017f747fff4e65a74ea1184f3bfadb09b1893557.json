{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Andy\\\\Desktop\\\\task_manager\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport TaskList from \"./components/TaskList\";\nimport TaskForm from \"./components/TaskForm\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentTask, setCurrentTask] = useState(null);\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:8000/api/tasks/\");\n      if (!response.ok) throw new Error(\"Failed to fetch tasks\");\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleCreateTask = async task => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/tasks/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(task)\n      });\n      if (!response.ok) throw new Error(\"Failed to create task\");\n      await fetchTasks();\n    } catch (error) {\n      console.error(\"Error creating task:\", error);\n    }\n  };\n  const handleUpdateTask = async task => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/tasks/${task.id}/`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(task)\n      });\n      if (!response.ok) throw new Error(\"Failed to update task\");\n      await fetchTasks();\n      setCurrentTask(null);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n  const handleDeleteTask = async id => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/tasks/${id}/`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) throw new Error(\"Failed to delete task\");\n      await fetchTasks();\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  const handleEditTask = task => {\n    setCurrentTask(task);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Task Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n        onSubmit: currentTask ? handleUpdateTask : handleCreateTask,\n        initialTask: currentTask,\n        onCancel: () => setCurrentTask(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(TaskList, {\n        tasks: tasks,\n        onDelete: handleDeleteTask,\n        onEdit: handleEditTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tyHLtTQgCnugEh068DDCMwoRRp4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","TaskList","TaskForm","jsxDEV","_jsxDEV","App","tasks","setTasks","isLoading","setIsLoading","currentTask","setCurrentTask","fetchTasks","response","fetch","ok","Error","data","json","error","console","handleCreateTask","task","method","headers","body","JSON","stringify","handleUpdateTask","id","handleDeleteTask","handleEditTask","className","children","fileName","lineNumber","columnNumber","onSubmit","initialTask","onCancel","onDelete","onEdit","_c","$RefreshReg$"],"sources":["C:/Users/Andy/Desktop/task_manager/frontend/src/App.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport TaskList from \"./components/TaskList\"\nimport TaskForm from \"./components/TaskForm\"\nimport \"./index.css\"\n\nfunction App() {\n  const [tasks, setTasks] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [currentTask, setCurrentTask] = useState(null)\n\n  useEffect(() => {\n    fetchTasks()\n  }, [])\n\n  const fetchTasks = async () => {\n    setIsLoading(true)\n    try {\n      const response = await fetch(\"http://localhost:8000/api/tasks/\")\n      if (!response.ok) throw new Error(\"Failed to fetch tasks\")\n      const data = await response.json()\n      setTasks(data)\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleCreateTask = async (task) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/tasks/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(task),\n      })\n\n      if (!response.ok) throw new Error(\"Failed to create task\")\n\n      await fetchTasks()\n    } catch (error) {\n      console.error(\"Error creating task:\", error)\n    }\n  }\n\n  const handleUpdateTask = async (task) => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/tasks/${task.id}/`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(task),\n      })\n\n      if (!response.ok) throw new Error(\"Failed to update task\")\n\n      await fetchTasks()\n      setCurrentTask(null)\n    } catch (error) {\n      console.error(\"Error updating task:\", error)\n    }\n  }\n\n  const handleDeleteTask = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/tasks/${id}/`, {\n        method: \"DELETE\",\n      })\n\n      if (!response.ok) throw new Error(\"Failed to delete task\")\n\n      await fetchTasks()\n    } catch (error) {\n      console.error(\"Error deleting task:\", error)\n    }\n  }\n\n  const handleEditTask = (task) => {\n    setCurrentTask(task)\n  }\n\n  return (\n    <div className=\"container\">\n      <header className=\"header\">\n        <h1>Task Manager</h1>\n      </header>\n\n      <main>\n        <TaskForm\n          onSubmit={currentTask ? handleUpdateTask : handleCreateTask}\n          initialTask={currentTask}\n          onCancel={() => setCurrentTask(null)}\n        />\n\n        {isLoading ? (\n          <div className=\"loading\">\n            <div className=\"spinner\"></div>\n          </div>\n        ) : (\n          <TaskList tasks={tasks} onDelete={handleDeleteTask} onEdit={handleEditTask} />\n        )}\n      </main>\n    </div>\n  )\n}\n\nexport default App\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}